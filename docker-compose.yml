version: '3.8'

services:
  backend:
    build: ./backend
    ports:
      - "8000:8000"
    environment:
      - DEBUG=${DEBUG}
      - TESTNET=${TESTNET}
      - BINANCE_API_KEY=${BINANCE_API_KEY}
      - BINANCE_SECRET=${BINANCE_SECRET}
      - MT5_LOGIN=${MT5_LOGIN}
      - MT5_PASSWORD=${MT5_PASSWORD}
      - MT5_SERVER=${MT5_SERVER}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - DISABLE_AUTH=${DISABLE_AUTH}
      - AI_SERVICE_URL=http://ai-service:5000
    volumes:
      - ./backend/src:/app
      - ./config:/app/config
    depends_on:
      - redis
      - postgres
      - ai-service
    networks:
      - trading-network

  ai-service:
    build: ./ai-service
    ports:
      - "5000:5000"
    environment:
      - DEBUG=${DEBUG}
      - MODEL_TYPE=${MODEL_TYPE:-mock}
    volumes:
      - ./ai-service/src:/app
      - ./data:/data
    networks:
      - trading-network

  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000/ws
    depends_on:
      - backend
    networks:
      - trading-network

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - trading-network

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=trading_db
      - POSTGRES_USER=trading_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-trading_pass}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - trading-network

volumes:
  redis_data:
  postgres_data:

networks:
  trading-network:
    driver: bridge